@page "/ViewUsers"
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@inject IUserService userService
<AuthorizeView>
    <Authorized>
<h3 style="text-align: center">Overview of all users</h3>

@if (!string.IsNullOrEmpty(msg))
{
    <div>
        <span>@msg</span>
    </div>
}

@if (users == null)
{
    <span>Loading..</span>
}
else if (!users.Any())
{
    <span>No users to be found</span>
}
else
{
    <div class="users-container">
        @foreach (User user in users)
        {
            <div class="user-card">
                <label>@user.UserName</label>
            </div>
        }
    </div>
}

        @*<h3>Hello @context.User.Identity.Name</h3>
        <p>@context.User.Claims.First(claim => claim.Type.Equals(ClaimTypes.Role)).Value</p>
        <p>
            Your claims include:
            <ol>
                @foreach (Claim claim in context.User.Claims)
                {
                    <li>
                        <label>@claim.Type: @claim.Value</label>
                    </li>
                }
            </ol>
        </p>*@
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in.</p>
    </NotAuthorized>
</AuthorizeView>

@code
{
    private IEnumerable<User>? users;
    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}

